from collections import deque

# Write a program for the company “We Deliver” which helps it keep track of its drivers and the cities
# it is delivering to.
# Global variables to store cities and drivers

drivers = {}
cities = {}

# In your system, you should keep track of two things:
# 1. The drivers that the company has, their worker ID, their name, and their start city.

class Driver:
    def __init__(self, driver_id, name, start_city):
        self.driver_id = driver_id
        self.name = name
        self.start_city = start_city

# 2. The cities that the company delivers to and where the driver can go from that city.

class City:
    def __init__(self, city_name):
        self.city_name = city_name
        self.destinations = []

    def add_destination(self, destination):
        if destination not in self.destinations:
            self.destinations.append(destination)

def add_link(start_city, destination_city):
    if start_city in cities and destination_city in cities:
        cities[start_city].add_destination(destination_city)
        cities[destination_city].add_destination(start_city)
        print("Link added from {0} to {1}." .format(start_city, destination_city))

# There are three main menus in the system. When the user runs the program, they are welcomed with
# the first one which displays:
# Hello! Please enter:
# 1. To go to the drivers’ menu
# 2. To go to the cities’ menu
# 3. To exit the system
# Based on the user input, your system will either redirect them to the next menu, or exit.

def main_menu():
    print("\n\nHello! Please enter:")
    print("1. To go to the drivers' menu")
    print("2. To go to the cities' menu")
    print("3. To exit the system")
    user_iput = input()
    if user_iput == '1':
        # print("Drivers menu")
        drivers_menu()
    elif user_iput == '2':
        # print("Cities menu")
        cities_menu()
    elif user_iput == '3':
        print("Exiting the system. Goodbye!")
    else:
        print("Invalid input. Please try again.")
        main_menu()

# DRIVERS’ MENU
# In that menu, the user is greeted with the following options:
# Enter:
# 1. To view all the drivers
# 2. To add a driver
# 3. To go back to main menu

def drivers_menu():
    print("\nDRIVERS' MENU\n")
    print("Enter:")
    print("1. To view all the drivers")
    print("2. To add a driver")
    print("3. To go back to main menu")
    user_iput = input()
    if user_iput == '1':
        # print("view all drivers")
        view_all_drivers()
    elif user_iput == '2':
        # print("add driver")
        add_driver()
    elif user_iput == '3':
        main_menu()
    else:
        print("Invalid input. Please try again.")

# View all drivers
# A list of all the drivers and their detail is printed to the users
# i.e.:
# ID001, Max Verstappen, Akkar
# ID002, Charles Leclerc, Saida
# ID002, Lando Norris, Jbeil

def view_all_drivers():
    if not drivers:
        print("No drivers in the system.")
    else:
        for driver in drivers.values():
            print("{0}, {1}, {2}" .format(driver.driver_id, driver.name, driver.start_city))

# Add a driver
# The user is asked to enter the name and start city of the driver, the driver is then saved to the system.
# The user does not input the ID of the driver, it is automatically generated by the system
# The user might input an invalid start city, make sure that the start city is already available in the
# database. If the city is not available, ask the user if they want to add it to the database, if yes,
# you should do so.

def add_driver():
    nb_driver = len(drivers)
    name = input("Enter the driver's name: ")
    start_city = input("Enter the driver's start city: ")

    if start_city not in cities:
        add_city = input("The city {0} is not in the database. Do you want to add it? (yes/no): " .format(start_city)).strip().lower()
        if add_city == 'yes':
            add_city_to_database(start_city)
        else:
            print("Not adding driver.")
            return

    nb_driver += 1
    nb_driver_str = str(nb_driver).zfill(3)
    driver_id = "ID{0}" .format(nb_driver_str)
    drivers[nb_driver_str] = Driver(driver_id, name, start_city)
    print("Driver {0} added with ID {1} and start city {2}." .format(name, driver_id, start_city))

def add_city_to_database(city_name):
    if city_name not in cities:
        cities[city_name] = City(city_name)
        print("City {0} added to the database." .format(city_name))

# Go back
# This option takes the user back to the previous main menu.
# CITIES’ MENU
# In that menu, the user is given the following choices:
# 1. Show cities
# 2. Print neighboring cities
# 3. Print Drivers delivering to city

def cities_menu():
    print("\nCITIES' MENU\n")
    print("Enter:")
    print("1. Show cities")
    print("2. Print neighboring cities")
    print("3. Print drivers delivering to city")
    print("4. To go back to main menu")
    user_iput = input()
    if user_iput == '1':
        # print("show cities")
        show_cities()
    elif user_iput == '2':
        # print("print neighboring cities")
        print_neighboring_cities()
    elif user_iput == '3':
        print("print drivers delivering to city")
        print_drivers_delivering_to_city()
    elif user_iput == '4':
        main_menu()
    else:
        print("Invalid input. Please try again.")

# Show cities
# Print a list with the name of all the cities in the program.

def show_cities():
    if not cities:
        print("No cities in the system.")
    else:
        for city in cities.values():
            print(city.city_name)

# Print neighboring cities
# Asks the user for a city name, and then prints all cities that can be reached from the user input.

def print_neighboring_cities():
    city_name = input("Enter the city name: ").capitalize()
    if city_name not in cities:
        print("The city {0} is not in the database." .format(city_name))
    else:
        neighbors = cities[city_name].destinations
        print("Cities reachable from {0}: {1}" .format(city_name, ', '.join(sorted(neighbors))))

# Print Drivers delivering to city
# Asks the users for a city name, and then prints all drivers that are delivering to this city. Drivers might
# not have this city as their starting city, but they can reach it by going through different cities.
# For example, if the user inputs Beirut, Both Max and Charles will be printed. But if the user inputs
# Zahle, only Lando will be printed.

def can_visit(start_city, end_city):
    if start_city not in cities or end_city not in cities:
        return False

    stack = deque([start_city])
    visited = []

    while stack:
        current = stack.pop()
        if current == end_city:
            return True
        if current not in visited:
            visited.append(current)
            for destination in cities[current].destinations:
                if destination not in visited:
                    stack.append(destination)
    
    return False

def find_drivers_reachable_to_city(city_name):
    reachable_drivers = []
    for driver in drivers.values():
        if can_visit(driver.start_city, city_name):
            reachable_drivers.append(driver)
    return reachable_drivers

def print_drivers_delivering_to_city():
    city_name = input("Enter the city name: ").capitalize()
    if city_name not in cities:
        print("The city {0} is not in the database." .format(city_name))
    else:
        reachable_drivers = find_drivers_reachable_to_city(city_name)
        if not reachable_drivers:
            print("No drivers can reach {0}." .format(city_name))
        else:
            for driver in reachable_drivers:
                print("{0}, {1}, {2}". format(driver.driver_id, driver.name, driver.start_city))

# Hint:
# There are functions called “Breadth First Search (BFS)” and “Depth First Search (DFS)”, you can look
# them up and use them here. But you don’t have to.

add_city_to_database('Akkar')
add_city_to_database('Saida')
add_city_to_database('Jbeil')
add_city_to_database('Beirut')
add_city_to_database('Zahle')

add_link('Saida', 'Zahle')
add_link('Beirut', 'Jbeil')
add_link('Jbeil', 'Akkar')

drivers = {
    'ID001': Driver('ID001', 'Max Verstappen', 'Akkar'),
    'ID002': Driver('ID002', 'Charles Leclerc', 'Saida'),
    'ID003': Driver('ID003', 'Lando Norris', 'Jbeil')
}

main_menu()